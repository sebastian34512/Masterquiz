Setup
1.	npm install -g @angular/cli
2.	async aus tests von komponenten entfernen (quiz, question, question-list)
3.	bei question-page test den code in before each einfügen:
TestBed.configureTestingModule({
      declarations: [QuestionPage],
      imports: [FormsModule, IonicModule], // Hinzugefügt
      providers: [
        {
          provide: ActivatedRoute,
          useValue: {
            snapshot: {
              paramMap: new Map().set('id', 'your_id_value'),
            },
          },
        },
      ],
    });
    
4.	bei question-list test den code in before each:
TestBed.configureTestingModule({
      declarations: [QuestionListPage],
      imports: [FormsModule, IonicModule], // Hinzugefügt
    });

5.	data test erstellen:
describe('DataService', () => {
  let service: DataService;

  beforeEach(() => {
    //service = new DataService();
    TestBed.configureTestingModule({});
    service = TestBed.inject(DataService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });

  //unit test
  it('should add a question to currentQuiz', () => {
    const question: Question = {
      id: '3',
      title: 'Wie gut können wir testen',
      a1: 'nicht gut',
      a2: 'so lala',
      a3: 'ganz ok',
      a4: 'super gut',
      correct: 4,
    };

    service.addQuestion(question);

    const addedQuestion = service.currentQuiz.questions.find(
      (q) => q.id == question.id
    );

    expect(addedQuestion).toBeDefined();
    expect(addedQuestion?.title).toBe('Wie gut können wir testen');
  });

  //integration test to show spy
  it('should call safeQuestion when calling deleteQuestion', () => {
    service.addQuestion(question);
    const spy = spyOn(service, 'safeQuestion');

    service.deleteQuestion(question);

    expect(spy).toHaveBeenCalled();

    expect(service.currentQuiz.questions.length).toBe(0);
  });
});
6.	ng test


E2E:
1.	npm install --save-dev cypress
2.	package.json als script: "e2e": "cypress open"
3.	in tsconfig.json: "sourceMap": false,
4.	in tsconfig.json: "exclude": ["./cypress.config.ts", "node_modules", "cypress", "**/*.cy.ts"]
5.	in einem cy.ts file: /// <reference types="cypress" />
6.	npm run e2e
7.	npm install --save-dev cy-mobile-commands

/// <reference types="cypress" />

describe('QuestionList Component', () => {
  beforeEach(() => {
    // Öffne die Anwendung vor jedem Test
    cy.visit('/'); // Passe die URL an deine lokale Entwicklungsumgebung an
    cy.viewport('iphone-5');

    //get all ion-buttons
    cy.get('ion-button').eq(1).click();

    cy.wait(1000);

    cy.get('ion-button').eq(0).click();
  });

  it('should display two questions at the beginning', () => {
    // get all ion-item-sliding elements and check if there are two
    var items = cy.get('ion-item-sliding');
    items.should('have.length', 2);
  });

CI:
1.	package.json: 
a.	startscript auf "start": "ng serve --host 0.0.0.0",
b.	test auf "test": "ng test --browsers=ChromeHeadless --watch=false --code-coverage"
2.	in cypress.config: baseUrl: 'http://0.0.0.0:4200'
3.	in .github/workflows eine ci.yaml mit inhalt:
name: CI

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16.14"

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  cypress-run:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cypress run
        uses: cypress-io/github-action@v6
        with:
          build: npm run build
          start: npm start
          

Weitere Tests:
Aufgaben:
1.	Unit Test: überprüfen, ob die Methode getQuestion eine Frage findet.
it('should find a question by id', () => {
    service.addQuestion(question);

    const foundQuestion = service.getQuestion(question.id);

    expect(foundQuestion).toBeDefined();
    expect(foundQuestion?.title).toBe('Wie gut können wir testen');
  });

2.	Intigratation Test: überprüfen, ob newQuestion eine leere Frage zurückgibt, wenn getQuestion ohne Id aufgerufen wird.
it('should create a new question when called with empty id', () => {
    const spy = spyOn(service, 'newQuestion');
    spy.and.callThrough();
    const newQuestion = service.getQuestion('');
    expect(spy).toHaveBeenCalled();

    expect(newQuestion).toBeDefined();
    expect(newQuestion?.title).toBe('');
  });

3.	End-to-End Test: Nachdem in ein leeres Quiz eine Frage hinzugefügt wird soll in der Question List die Frage erscheinen
/// <reference types="cypress" />

describe('Question Component', () => {
  beforeEach(() => {
    // Öffne die Anwendung vor jedem Test
    cy.visit('/question-list'); // Passe die URL an deine lokale Entwicklungsumgebung an
    cy.viewport('iphone-5');
  });

  it('should be empty at the beginning', () => {
    cy.get('ion-item-sliding').should('have.length', 0);
  });

  it('should add a question on clicking the plus button', () => {
    cy.get('ion-button').eq(0).click();

    cy.get('ion-item')
      .eq(1)
      .children()
      .type('Wie viele Beine hat ein Hund?')
      .should('have.value', 'Wie viele Beine hat ein Hund?');
    cy.get('ion-back-button').eq(1).click();
    cy.get('ion-item-sliding').should('have.length', 1);
  });
});





